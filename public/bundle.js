(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// A component that displays a person's name(contactName), phone number(contactPhoneNumber), and address(contactAddress).
const contacts = {
  contactBuilder(contactObj) {
    let contactSection = document.createElement("section");
    let contactName = document.createElement("h3");
    contactName.innerText = contactObj.name;
    let contactPhoneNumber = document.createElement("p");
    contactPhoneNumber.innerText = contactObj.phoneNumber;
    let contactAddress = document.createElement("p");
    contactAddress.innerText = contactObj.address;
    contactSection.appendChild(contactName);
    contactSection.appendChild(contactPhoneNumber);
    contactSection.appendChild(contactAddress);
    return contactSection;
  }

};
var _default = contacts;
exports.default = _default;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// A ContactCollection component that loads existing contacts from storage, and saves new ones. Each new contact should have an auto-generated identifier.
let contactCollection = {
  getAllContacts() {
    return fetch("http://localhost:8088/contacts").then(response => response.json());
  },

  postResponses(newContacts) {
    return fetch("http://localhost:8088/contacts", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(newContacts)
    }).then(repsonses => repsonses.json());
  }

};
var _default = contactCollection;
exports.default = _default;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eventListeners = _interopRequireDefault(require("./eventListeners"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// A ContactForm component that, when filled out and a submit button is pressed, adds a new contact to storage. It should import the ContactCollection component.
// This module will build a form and append it to the DOM.
// 1. Build HTML form
// 2. Attach event listener to button in form
// 3. Append the HTML form to the DOM
const contactForm = {
  formBuilder() {
    //form appends to dom
    let formContainer = document.querySelector("#form-container");
    let contactForm = document.createElement("section");
    formContainer.appendChild(contactForm);
    let formName = document.createElement("input");
    formName.setAttribute("id", "form-name-input");
    formName.placeholder = "Name";
    contactForm.appendChild(formName);
    let formPhoneNumber = document.createElement("input");
    formPhoneNumber.setAttribute("id", "form-phone-input");
    formPhoneNumber.placeholder = "Phone Number";
    contactForm.appendChild(formPhoneNumber);
    let formAddress = document.createElement("input");
    formAddress.setAttribute("id", "form-address-input");
    formAddress.placeholder = "Address";
    contactForm.appendChild(formAddress);
    let formSubmit = document.createElement("button");
    formSubmit.innerHTML = "Submit";
    contactForm.appendChild(formSubmit); //form event listener

    formSubmit.addEventListener("click", _eventListeners.default.formAppendtoJson);
  }

};
var _default = contactForm;
exports.default = _default;

},{"./eventListeners":5}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _contact = _interopRequireDefault(require("./contact"));

var _contactCollection = _interopRequireDefault(require("./contactCollection"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// A ContactList component that displays all contacts. It should import the Contact component and the ContactCollection component.
//
const contactList = {
  appendContactList() {
    _contactCollection.default.getAllContacts().then(allContacts => {
      let contactListFragment = document.createDocumentFragment(); // Iterate over data in JSON and build HTML for each item

      allContacts.forEach(person => {
        let contactAddition = _contact.default.contactBuilder(person);

        contactListFragment.appendChild(contactAddition);
      }); // Append the HTML to the DOM

      let contactListContainer = document.querySelector("#display-container");
      contactListContainer.appendChild(contactListFragment);
    });
  }

};
var _default = contactList;
exports.default = _default;

},{"./contact":1,"./contactCollection":2}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _contactCollection = _interopRequireDefault(require("./contactCollection"));

var _contactList = _interopRequireDefault(require("./contactList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//event listener for form button which will take the response fields and populate an object which will post to the json server in the correct key:value pairs.
const eventListeners = {
  formAppendtoJson() {
    let resetResponses = document.querySelector("#display-container");
    resetResponses.innerHTML = " ";
    let responseName = document.querySelector("#form-name-input").value;
    let responseAddress = document.querySelector("#form-address-input").value;
    let responsePhoneNumber = document.querySelector("#form-phone-input").value;
    const responseObj = {
      name: responseName,
      phoneNumber: responsePhoneNumber,
      address: responseAddress
    };

    _contactCollection.default.postResponses(responseObj).then(repost => {
      console.log(repost);

      _contactList.default.appendContactList();
    });
  }

};
var _default = eventListeners;
exports.default = _default;

},{"./contactCollection":2,"./contactList":4}],6:[function(require,module,exports){
"use strict";

var _contactList = _interopRequireDefault(require("./contactList"));

var _contactForm = _interopRequireDefault(require("./contactForm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// In main.js, import the ContactList component and the ContactForm component.
_contactList.default.appendContactList();

_contactForm.default.formBuilder();

},{"./contactForm":3,"./contactList":4}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
