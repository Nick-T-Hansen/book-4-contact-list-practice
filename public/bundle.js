(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// A component that displays a person's name(contactName), phone number(contactPhoneNumber), and address(contactAddress).
const contacts = {
  contactBuilder(contactObj) {
    let contactSection = document.createElement("section");
    let contactName = document.createElement("h3");
    contactName.innerText = contactObj.name;
    let contactPhoneNumber = document.createElement("p");
    contactPhoneNumber.innerText = contactObj.phoneNumber;
    let contactAddress = document.createElement("p");
    contactAddress.innerText = contactObj.address;
    contactSection.appendChild(contactName);
    contactSection.appendChild(contactPhoneNumber);
    contactSection.appendChild(contactAddress);
    return contactSection;
  }

};
var _default = contacts;
exports.default = _default;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// A ContactCollection component that loads existing contacts from storage, and saves new ones. Each new contact should have an auto-generated identifier.
let contactCollection = {
  getAllContacts() {
    return fetch("http://localhost:8088/contacts").then(response => response.json());
  }

};
var _default = contactCollection;
exports.default = _default;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// A ContactForm component that, when filled out and a submit button is pressed, adds a new contact to storage. It should import the ContactCollection component.
// This module will build a form and append it to the DOM.
// 1. Build HTML form
// 2. Attach event listener to button in form
// 3. Append the HTML form to the DOM
const contactForm = {
  formBuilder() {
    //form appends to dom
    let formContainer = document.querySelector("#form-container");
    let contactForm = document.createElement("section");
    formContainer.appendChild(contactForm);
    let formName = document.createElement("input");
    formName.setAttribute("id", "form-name-input");
    formName.placeholder = "Name";
    contactForm.appendChild(formName);
    let br = document.createElement("br");
    br;
    let formPhoneNumber = document.createElement("input");
    formPhoneNumber.setAttribute("id", "form-phone-input");
    formPhoneNumber.placeholder = "Phone Number";
    contactForm.appendChild(formPhoneNumber);
    br;
    let formAddress = document.createElement("input");
    formAddress.setAttribute("id", "form-address-input");
    formAddress.placeholder = "Address";
    contactForm.appendChild(formAddress);
    br;
    let formSubmit = document.createElement("button");
    contactForm.appendChild(formSubmit);
  }

};
var _default = contactForm; // This module will also contain the function that executes when the button in the form is clicked. When the button in the form is clicked, the following will happen:
// 1. Get user input that user entered
// 2. Create a new object with the same structure we have been using throughout the application to represent a food item:
// {
//   name: "user input name",
//   phoneNumber: "user input expiration",
//   type: "user input type"
// }
// 3. Call the method(postNewFood) with the fetch request to POST to the API

exports.default = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _contact = _interopRequireDefault(require("./contact"));

var _contactCollection = _interopRequireDefault(require("./contactCollection"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// A ContactList component that displays all contacts. It should import the Contact component and the ContactCollection component.
//
const contactList = {
  appendContactList() {
    _contactCollection.default.getAllContacts().then(allContacts => {
      let contactListFragment = document.createDocumentFragment(); // Iterate over data in JSON and build HTML for each item

      allContacts.forEach(person => {
        let contactAddition = _contact.default.contactBuilder(person);

        contactListFragment.appendChild(contactAddition);
      }); // Append the HTML to the DOM

      let contactListContainer = document.querySelector("#display-container");
      contactListContainer.appendChild(contactListFragment);
    });
  }

};
var _default = contactList;
exports.default = _default;

},{"./contact":1,"./contactCollection":2}],5:[function(require,module,exports){
"use strict";

var _contactList = _interopRequireDefault(require("./contactList"));

var _contactForm = _interopRequireDefault(require("./contactForm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// In main.js, import the ContactList component and the ContactForm component.
_contactList.default.appendContactList(); //testing form structure


_contactForm.default.formBuilder();

},{"./contactForm":3,"./contactList":4}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
